#!/usr/bin/python3
#	gbpig - German Biometric Passport Image Generator
#	Copyright (C) 2021-2021 Johannes Bauer
#
#	This file is part of gbpig.
#
#	gbpig is free software; you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation; this program is ONLY licensed under
#	version 3 of the License, later versions are explicitly excluded.
#
#	gbpig is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with gbpig; if not, write to the Free Software
#	Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
#	Johannes Bauer <JohannesBauer@gmx.de>

import sys
from FriendlyArgumentParser import FriendlyArgumentParser
from PassportGenerator import PassportGenerator

parser = FriendlyArgumentParser(description = "Generate a biometric passport photo.")
parser.add_argument("-r", "--resolution", metavar = "dpi", type = int, default = 300, help = "Output image resolution in dpi. Defaults to %(default)d dpi.")
parser.add_argument("-t", "--picture-type", choices = [ "adult", "child" ], default = "adult", help = "Give the picture type. Can be any of %(choices)s, defaults to %(default)s.")
parser.add_argument("-b", "--border-size", metavar = "mm", type = float, default = 5, help = "Specifies the dimension around the image that is included (in mm). Defaults to %(default).1f mm.")
parser.add_argument("-l", "--line-size", metavar = "mm", type = float, default = 2, help = "Specifies the length of cutting lines in mm. Defaults to %(default).1f mm.")
parser.add_argument("-W", "--canvas-width", metavar = "mm", type = float, default = 100, help = "Specifies the output canvas width in mm. Defaults to %(default).1f mm.")
parser.add_argument("-H", "--canvas-height", metavar = "mm", type = float, default = 150, help = "Specifies the output canvas height in mm. Defaults to %(default).1f mm.")
parser.add_argument("-c", "--check", action = "store_true", help = "Allows you to check the classification was correct by creating additional help lines.")
parser.add_argument("-v", "--verbose", action = "count", default = 0, help = "Increases verbosity. Can be specified multiple times to increase.")
parser.add_argument("json_input_filename", type = str, help = "JSON file which describes the source image along with points of interest (POIs) in pixel coordinates.")
parser.add_argument("image_output_filename", type = str, help = "Output image file.")
args = parser.parse_args(sys.argv[1:])

ppgen = PassportGenerator(args)
ppgen.run()
